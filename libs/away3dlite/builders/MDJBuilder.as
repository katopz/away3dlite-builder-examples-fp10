package away3dlite.builders{	import away3dlite.animators.MovieMesh;	import away3dlite.arcane;	import away3dlite.core.utils.Debug;	import away3dlite.loaders.data.MaterialData;	import away3dlite.materials.BitmapMaterial;		import com.adobe.images.PNGEncoder;	import com.adobe.serialization.json.JSON;		import flash.utils.Dictionary;		import nochump.util.zip.ZipEntry;	import nochump.util.zip.ZipOutput;

	use namespace arcane;	/**	 * MDJBuilder : Multi MD2 in 1 file zip format as MDJ	 * @author katopz	 */	public class MDJBuilder extends MD2Builder	{		public var isIncludeMaterial:Boolean = true;				public var meshPath:String = "";		public var texturePath:String = "";				private var _meshSources:Array/*Mesh Source*/;		private var _textureSources:Array/*Texture Source*/;				public function MDJBuilder()		{			super();		}		public function getMDJ(meshes:Vector.<MovieMesh>):String		{			var _mdj:String = "";			var _mesh:MovieMesh;			var _materials:Dictionary = new Dictionary(true);			var _url:String;						_meshSources = [];			_textureSources = [];			// write all material as png, TODO : as jpg option 			for each (var _materialData:MaterialData in _materialLibrary)				if (_materialData.textureBitmap)				{					if(_materialData.textureFileName && _materialData.textureFileName != "")						_url = _materialData.textureFileName					else						_url = _materialData.name + ".png";										_materials[_url] = _materialData.textureBitmap;										Debug.trace(" + Material :" + _url);				}						// md2			for each (_mesh in meshes)			{				if (_mesh.material is BitmapMaterial)				{					for (_url in _materials)						if(_materials[_url] == BitmapMaterial(_mesh.material).bitmapData)							BitmapMaterial(_mesh.material).url = _url;				}								_meshSources.push(meshPath + _mesh.name + ".md2");				_textureSources.push(texturePath + BitmapMaterial(_mesh.material).url);								Debug.trace(" + Mesh :" + _mesh.name + ".md2");			}						// TODO: meshPath, texturePath			_mdj = JSON.encode({paths:["", ""], meshes:_meshSources, textures:_textureSources});						Debug.trace(_mdj);						return _mdj;		}	}}