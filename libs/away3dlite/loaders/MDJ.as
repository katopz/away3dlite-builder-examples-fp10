package away3dlite.loaders{	import away3dlite.animators.MovieMesh;	import away3dlite.animators.MovieMeshContainer3D;	import away3dlite.arcane;	import away3dlite.core.IDestroyable;	import away3dlite.core.utils.Debug;	import away3dlite.events.ParserEvent;	import away3dlite.materials.BitmapFileMaterial;		import com.adobe.serialization.json.JSON;
	use namespace arcane;	/**	 * File loader for the MDJ file format. It's MD2, Texture,... in JSON format.	 *	 * @example	 * {	 * 	"paths" : ["modelPath/", "texturePath/],	 * 	"meshes" : ["model.md2"],	 * 	"textures" : ["model.png"]	 * }	 *	 * @author katopz@sleepydesign.com	 */	public class MDJ extends AbstractParser implements IDestroyable	{		/** @private */		arcane override function prepareData(data:*):void		{			var i:int = 0;			var _id:String;			var _json:JSON = new JSON();			var _models:Object = JSON.decode(data) as Object;			var _meshList:Array = _models.meshes;			var _materialList:Array = _models.textures;						// TODO : void null paths			for (i = 0; i < _meshList.length; i++)			{				var _md2:MD2 = new MD2();				_md2.scaling = scaling;				_md2.name = String(_meshList[i]).split(".md2")[0];				_md2.name = _md2.name.slice(_md2.name.lastIndexOf("/")+1);				_md2.name = _md2.name.split("_")[0];				_md2.addOnSuccess(onSuccess);				_md2.material = new BitmapFileMaterial(_models.paths[1] + _materialList[i]);				var _loader3D:Loader3D = new Loader3D();				_loader3D.loadGeometry(_models.paths[0] + _meshList[i], _md2);			}		}		private function onSuccess(event:ParserEvent):void		{			var model:MovieMesh = event.result as MovieMesh;			model.bothsides = bothsides;			_container.addChild(model);						Debug.trace("onSuccess:"+model.name);		}		/** @private */		arcane override function notifySuccess():void		{			if (autoPlay)				MovieMeshContainer3D(_container).play();			super.notifySuccess();		}		public var autoPlay:Boolean = true;		public var bothsides:Boolean = false;		/**		 * A scaling factor for all geometry in the model. Defaults to 1.		 */		public var scaling:Number = 1;		/**		 * Controls the automatic centering of geometry data in the model, improving culling and the accuracy of bounding dimension values.		 */		public var centerMeshes:Boolean;		/**		 * Creates a new <code>MDJ</code> object.		 */		public function MDJ()		{			_container = new MovieMeshContainer3D();			binary = false;		}	}}